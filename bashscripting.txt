Bash scripting
==============
bash --version  : check version
echo $SHELL     : check current shell
chsh            : change shell if you would like to (ksh, zsh etc)

add locations to path:   export PATH="<path>:$PATH"
if multiple separate them with a colon (:); always end with: :$PATH"

for instance:
    export PATH="$HOME/MyScripts:$PATH"
    export PATH="/bin/foo:/usr/some:$PATH"

Set shell options with: shopt or set command

Reload bash configuration
-------------------------
    source ~/.bashrc

piping and redirecting
----------------------
ls | wc        : counts the words as result from the directory listing
ls > list.txt  : writes listing to output file
ls 1> list.txt : same
cat < list.txt : show content from saved file

ls oopsy 1> success.txt 2> error.txt  : write to file depending on fail/success
ls oopsy 1> success.txt 2>> error.txt : append to error.txt, overwite success.txt

To run a command but don't show it you can redirect to /dev/null.

'Here' document (to easy display multiple lines of text):
cat << EndOfTag
This is a 
text over multiple lines
without using echo or newline chars
EndOfTag

Create, write and save lines to a file in one go :)

cat << EOF > outputfile
Line1
Line2
Line3
EOF

This creates a file outputfile and writes the given lines to it.
EOF is just a placeholder, can be any word as long as begin and end match.

Bash builtins and other commands
--------------------------------
Bash has some builtin commands that can differ from the other versions
command echo Hello  : run echo (separate program)
builtin echo Hello  : run echo (Bash builtin)

command -V echo : shows which version of echo is used / info about the command
To disable using builtin version: enable -n echo
Now command -V echo will tell you that you use the /usr/bin/echo
To enable the builtin again just use: enable echo
If there is only a builtin version like with command 'history' disabling it will cause that the command will not work anymore. Only use it when there is an extra
version that you want to use to override the builtin version.

enable -n : show all the disabled builtins

Be aware that the help info for builtins is different:
- for builtins     : help <command>
- for non builtins : man <command> or another help option

Output/formatting
-----------------
Output in columns instead of list: <command> | columns

Using ~, (), {} and (())
------------------------
echo ~ = home location
cd ~ = go to home
cd ~- = got to previous f

brace expansion: creates sets or ranges ({..})
- echo /tmp/file{one,two,three} : /tmp/fileone  /tmp/filetwo  /tmp/filethree
- touch file{01..3}.txt  : creates file01.txt, file02.txt and file02.txt in one go
- touch file_{01..12}{a..d}  : combining; creates 12 * 4 = 48 files: file_01a t/m file_12d
- echo {1..10} outputs : 1 2 3 4 5 6 7 8 9 10
- echo {01..10} outputs: 01 02 03 04 05 06 07 08 09 10
- echo {a..z..2} outputs: a c e g i k m o q s u w y
- echo {1..10..2} output: 1 3 5 7 9
- echo {cat,dog,fox}_{1..2} : cat_1, dog_1, fox_1, cat_2, dog_2 and fox_2

Printing nrs 1 to 10 horizontally:  echo {1..10}
    
Note that these give the same result:


parameter expansion: retrieves and transforms stored values (${..})
- g="Hello there!"; echo Output\: ${g}     : Output: Hello there!
- g="Hello there!"; echo Output\: ${g:6}   : Output: there!   (position 6)
- g="Hello there!"; echo Output\: ${g:6:3} : Output: the      (position 6, then 3 chars)
- g='Hallo daar!'; echo ${g/a/e}           : Hello daar!      (/ : replaces first a by e) 
- g='Hallo daar!'; echo ${g//a/e}          : Hello deer!      (//: replaces all a's by e's) 
- g='Hallo daar!'; echo ${g^^[ao]}         : HAllO dAAr!      (^^: uppercase all a's and o's) 

arithmetic expansion: math ( $((..)) )
- echo $((2+2)) : 4

Text editor for bash
--------------------
preferred nano -> check Learning Nano course

How to bash
----------
- multiple commands separated by semicolons
- create bash scripts and make them executable

Bash script:
1. create a file starting with a 'shebang': #!/usr/bin/env bash
   optional: give it .sh extension so you know it is a bash script
2. make them executable with chmod +x <script>
3. Then just execute with . <script>
   - You need to supply the . here, without it the script won't be executed

Example:
cat << EndOfScript > myscript.sh
#!/usr/bin/env bash
echo Hello there, $(whoami) :-)
EndOfScript

- chmod +x myscript.sh
- . myscript.sh

Using echo
----------
echo Hello
echo this; echo and that
echo "The kernel is $(uname -r)"    : will resolve the $-command
echo 'The kernel is $(uname -r)'    : will literally print all, also $(uname -r)

-n: stay one the same line (don't use \n)
    echo -n 'This '; echo -n ' is on one line'

Use \ character to escape, that is take literal char following it

Read input and use it in an echo in one go:
------------------------------------------
    echo -n "Who are you? " && read w && echo "Hello $w, nice to meet you."


Variables
---------
Variables are case sensitive, alphanumeric

<varname>=<value> to declare, no 'declare' needed
declare -r <varname> : declare a read-only variable within script/session
declare -l <var> : var = always lowercase
declare -u <var> : var = always uppercase

env        : show env variables
declare -p : show all variables in current session

Using numbers
-------------
In bash only integers allowed and you need to declare them.
Bash is NOT designed for doing complexer calculations. If really needed use bc (see below).

Use: $((..))
operators: +, -, *, /, %, **
a+=3  same as:  a=a+3
a-=3  same as:  a=a-3  and so on

Be aware that variables are always strings by default
    a=8          : assign 8 to a
    a=$((a+=2))  : take a, add 2 to it and assign back to a
    echo $a      : result 10

To make them work as integer, declare them with -i
    declare -i a=8
    a=$a+2
    echo $a   result 10
    
For using non integer calculations use bc to pipe a calculation to like this:
    declare -i a=1
    declare -i b=3
    e=$(echo "scale=<nr of decimals>; $a/$b" | bc)
        Example: e=$(echo "scale=3; $a/$b" | bc)
                 echo $e   : gives .333
               
Random numbers: echo $RANDOM   gives f.i.: 27108
Random nr between 1 and <x>:
    echo $((1 + $RANDOM % <x> ))

Comparing values with test (test builtin)
-----------------------------------------
Using [..] with switch options to test a value
Using [[..]] with switch options to test multiple values and use regular expr
Testing is considered an important functionality in bash scripts.

[ -d ~ ] : do a test on/check if ~ is a directory (-d)
To verify give: echo $?   which returns 0 for true and 1 for false

Compare strings:
[ "cat" = "dog" ]; echo $?   : 1
[ "dog" = "dog" ]; echo $?   : 0

Compare numbers:
[ 4 -lt 5 ]; echo $?   : 0
[ 4 -lt 3 ]; echo $?   : 1

Check 'help test' to see the possibilities.

Extended test (multiple tests in one):
Example:
  Test if homedir is a dir and if /bin/xxxx exists:
    [[ -d ~ && -a /bin/bash ]]; echo $?   : 1   (because one of the tests is false)
  Test if homedir is a dir and if /bin/bash exists:
    [[ -d ~ || -a /bin/bash ]]; echo $?   : 0   (because the first test is true)

Using && and || between two commands : 

  [[ -d ~ ]] && echo ~ is a directory
    If the first statement is true then the second statement is executed

true && echo 'Success!'
    Outputs Success; if you change the first check to false, it will not output due to the &&
  
Using regular expressions to test:
  [[ "cat" =~ c.* ]]; echo $?   : true because cat matches the c.* expression
  
Formatting
==========
Using echo -e
-------------
use -e switch for echo to use escape codes:
- be aware of special characters like !; use a space in between

    echo -e "Name\tNumber"; echo -e "Scott\t123"    : \t tab
    echo -e "Line1\nLine2"                          : \n newline
    echo -e "\aDing!"                               : \a sound/bell
    
color codes:
    Use special code in the string to use colors:
    start: '\033[' + fgcolor;bgcolor + 'm'
    end  : '\033[0m'

    Color       FG  BG      Color           FG  BG      Style      Code
    -----------------       -----------------------     -----------------
    Black       30  40      Bright Black    90  100     Reset           0
    Red         31  41      Bright Red      91  101     Bright          1  
    Green       32  42      Bright Green    92  102     Dim             2
    Yellow      33  43      Bright Yellow   93  103     Italic          3
    Blue        34  44      Bright Blue     94  104     Underlined      4
    Magenta     35  45      Bright Magenta  95  105     Blinking        5
    Cyan        36  46      Bright Cyan     96  106     Inverted        7
    White       37  47      Bright White    97  107     Strikethrough   9
    
    Example:   
    Yellow on blue: 
        echo -e "\033[33;44mColored Text\033[0m"
    
Combine it by adding all colors and codes together:
    Example blinking, italic, white on cyan:
        echo -e "\033[3;5;97;106mLook at me! \033[0m"   (note the space between ! and \)

You can use variables to store often used codes and use them like this:
    underline="\033[4m"
    brightred="\033[91m"
    none="\033[0m"
    
    echo -e "This is $underline"special"$none to me."
    
Using printf
------------
    echo "The results are: $((2+2)) and $((3+3))"
    printf "The results are: %d and %d\n" $((2+2)) $((3+3))
    
%d is a decimal nr placeholder and after the statement come the variables/values to insert at %d. %s can be used for strings.

%<nr> reserves space, a positive nr means right aligned, a negative one left aligned. 
    %-10s  = a 10-char space for a left aligned string
    %5d    = a  5 char space for a right alined decimal
    %0<nr> = fill up the char space with 0's
Example:
    printf "%-10s: %5d\n" "Waarde 1" 123 "Waarde 2" 2315
    printf "%-10s: %05d\n" "Waarde 1" 123 "Waarde 2" 2315   (fill up the nrs with 0's)
   
Arrays
======
two types: Indexed and associative/
Array index starts with 0.

${<arrayname[@]}   : shows all values
${!<arrayname[@]}  : shows all indexes/array nrs
${#<arrayname[@]}  : shows nr of array values

Indexed:
-------
declare -a fruits=("apple" "banana" "pear")
echo fruits[2]          : pear
fruits[5]="mango"       : add mango to 5th array index
fruits+=("jackfruit")   : 

Three ways to print the array:
- output each array value (skip empty ones) on one line
    echo ${fruits[@]}  : apple banana pear mango

- output each array value (skip empty ones) on multiple lines
    printf '%s\n' "${fruits[@]}"

- output each array value (including empty ones)
    for i in {0..5}; do echo ${fruits[$i]}; done
    
- output array index nrs + values:
    for i in ${!fruits[@]}; do echo "$i - ${fruits[$i]}"; done
        
Associative
-----------
Example:
    declare -A office
    office[city]="Den Haag"; office["building name"]="De Koffiemolen"
    echo ${office["building name"]} is in ${office[city]}
    printf "%-15s%s\n" "${!office[@]}" "${office[@]}"
    
Control structures
==================
if statement
------------
    if condition; then      if condition; then      if condition; then
        script                  script                  script
    fi                      else                    elif condition; then
                                script                  script          
                            fi                      else
                                                        script

For condition you can use [[...]] or ((..)) or a mix of them whatever you want :)
Example:
    #!/usr/bin/env bash
    declare -i a=3
    
    if [[ $a -gt 4 ]]; then
        echo "$a is greater than 4."
    elif (( $a > 2 )); then
        echo "$a is greater than 2."
    else
        echo "$a is not greater than 4."        
    fi

Loops
=====
Three kinds of:
- While 
- Until
- For

While loop
----------
while ...
do
    ...
done

Example:
    declare -i n=0
    while (( n <10 ))
    do
        echo "n:$n"
        (( n ++ ))
    done

Until loop
----------
until ...
do
    ...
done

Example:
    declare -i m=0
    until (( m == 10 ))
    do
        echo -ne "$m\b"
        (( m++ ))
        sleep 1
    done

Example oneliner, one second-counter by using -n and \b:
    declare -i m=0; until (( m == 10 )); do echo -ne "$m\b"; (( m++ )); sleep 1; done

For-loop
--------
for i in ...
do
    ...
done

Examples:
    for i in {1..100}; do echo $i; done
    for (( i=1; i<=100; i++ )); do echo $i; done

Example looping through array:
    declare -a fruits=("apple" "banana" "cherry")
    for i in ${fruits[@]}; do echo "Today's fruit is: $i"; done
    
Or using command output to loop through (like dir output via ls):
    for i in $(ls); do echo "Found file: $i"; done
    
Using case
==========
Easy to use when multiple tests have to be done.

Example:
    animal="dog"
    case $animal in
        cat) echo "Feline";;
        dog|puppy) echo "Canine";;
        *) echo "No match!"
    esac
    
As oneliner (easy for testing directly in CLI):
    animal="dog"; case $animal in cat) echo "Feline";; dog|puppy) echo "Canine";; *) echo "No match!"; esac

Using functions
===============
- Allow us to repeatedly call a piece of code. (old version: function fname { ... })
- Most put them in top of the script right after the shebang before the main code.
- The arguments you give with the function are called $1, $2, etc.
- $FUNCNAME recturns the name of the function.

fn(){
    ...
}

Example function 1:
    greet() { 
        echo "Hi there, $1. What a nice $2" 
    }
    
Call the function:
    greet Dick evening    : Hi there, Dick. What a nice evening
    
Example function 2:
    numberthing() {
        declare -i i=1
        for f in $@; do
            echo "$i: $f"
            (( i ++ ))
        done
        echo "Brought to you by $FUNCNAME."
    }

Call the function:
    numberthing dick piet kees   :  
        1: dick
        2: piet
        3: kees
        
Or us a command or array:
    numberthing $(ls /)        : gives a numbered output of the root dir content
    numberthing ${fruits[@]}   : gives a numbered output of the values in array fruits
    

    



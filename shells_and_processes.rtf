{\rtf1\ansi\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\f0\fs22\lang1033 Linux: Shells and processes\par
===========================\par
\par
Command execution process flow\par
------------------------------\par
\par
     Keyboard  ->  terminal emulator  -> shell \par
                                          |\par
                                          v\par
screen <- terminal emulator <- shell <- kernel\par
\par
\ul\b Shell types\par
\ulnone\b0 When you use the keyboard to type in commands into a terminal window, such as \par
GNOME Terminal, these commands are translated by the shell into ones and zeroes \par
and sent to the kernel which then processes them. When the kernel finishes, \par
it sends the data back to the shell which translates the output back into text \par
which is displayed in the terminal emulator and output on the screen. \par
\par
A shell allows you to execute operating system commands. \par
When a command is entered into the terminal, the shell checks to see \par
- if it's a built-in first, and if so, executes it. \par
- If it's not built-in, it will see if it's an alias of another command, \par
  configured by the OS or another user. \par
- If it's not built-in, or an alias, it will look for the command on the disk \par
  and try to execute it there. \par
- If it doesn't exist, it will say "command not found." \par
\par
There is a standard for Unix-like operating systems called POSIX. \par
If you want to write your shell scripts to be portable, it may be advantageous \par
to write your shell scripts in a POSIX-compliant manner. \par
\par
One of the first shells was the Bourne Shell, which came in out 1977. \par
It was fairly basic and POSIX-compliant. Bill Joy one of the founders of \par
Sun Microsystems wrote csh or the C Shell, which resembles the C language. \par
The Bourne Shell won out in popularity, and it's not recommended that we write \par
shell scripts in csh anymore. In 1983 ksh or the Korn Shell was introduced \par
adding job control and command history, which we'll talk about later in this course. \par
\par
Later, Bash was introduced as a replacement for Bourne. If started with the correct \par
options, Bash is mostly POSIX compliant. Bash includes most of the original \par
functionality of the Bourne Shell, most of the additions of Korn Shell, as well \par
as some additional functionality of its own. \par
Bash is probably the default shell on more Unix systems than any other shell. \par
Most systems now run Bash 4. \par
\par
Another popular shell is Dash. Dash is the Debian version of the Ash Shell \par
from NetBSD Unix. Its biggest claim to fame is that it's smaller and uses less \par
memory than Bash. Although it's popular on Debian-based distributions it isn't \par
easily installed on CentOs 7. \par
\par
If interactivity is your interest you may want to check out Fish. \par
Fish has some interesting features like syntax highlighting on the command line \par
so you know if you've typed in the correct command. It also suggests commands, \par
options and paths. \par
\par
The last shell we'll talk about is Zsh. Zsh has virtually identical features \par
to Bash, but is enhanced in several ways including better command and option \par
completion and better pattern matching. \par
\par
Most of these shells can be installed using yum. For instance, to install Zsh, \par
you'd type into a terminal:\par
- sudo apt install -y zsh \par
\par
to change your shell, run the change shell command and follow the prompts. \par
Be sure to type in the whole path to the desired shell when prompted. \par
You type in 'chsh' and hit Enter. If will prompt you for the desired shell. \par
To use the new shell, you'll have to log out and log back in again. \par
There are a lot of interesting shell options in Linux. For interactive use, \par
you should try out the different shells to see what you like. \par
However, if you create shell scripts to automate tasks, the choice of a shell \par
becomes very important as the syntax of built-in design elements like loops, \par
conditionals and arrays will change depending on which shell you use. \par
Shell scripts written for one shell may not be compatible with another. \par
I would recommend at this time to keep using Bash and later explore other shells.\par
\par
Variables and shell environment\par
-------------------------------\par
There are two types of variables accessible in a shell session. \par
\par
- Environmental variables: defined for the current shell and inherited by \par
  any child processes or child shells. \par
\par
- Shell variables: contained exclusively within the shell in which they were \par
  defined. They are often used to keep track of data like the current \par
  working directory. \par
\par
To see the environmental variables in a terminal, type in 'printenv' and hit Enter. \par
If you want to get the value of an individual variable, you can specify it. \par
Type in printenv, and for instance type in capital SHELL and hit Enter. \par
Another way is to use the echo command to print the value by typing in 'echo $SHELL' \par
and hit Enter. \par
\par
To see the shell variables we use the set command. Type in 'set' and hit Enter. \par
By default the set command shows shell functions as well as variables, \par
which can be quite long. To change the behavior of set do posix mode, \par
which doesn't show functions. Use the dash O posix option. \par
Type in 'set -o posix' and hit Enter.\par
Now type in set again and let's pipe it to less. Here we can see all of the \par
shell variables without the shell functions. \par
To show the difference between environmental variables and shell variables, \par
let's set a variable in our shell. Press q to quit, and then type in \par
'VAR=TEST' and hit Enter. Now let's grep the output of set to view it. \par
Type in 'set | grep VAR' and hit Enter. And there it is. Now let's grep the output \par
of printenv. Type in printenv | grep VAR and hit Enter. And we can see that a variable is not a part of the environment. To turn a shell variable into an environmental variable we can just export it. Let's export the variable we just set. Type in export VAR and hit Enter. Verify with printenv. Type in printenv | grep VAR and hit Enter. And we can that our variable is now part of the environment. It isn't persistent since we didn't save it in a file. If we rebooted, it would disappear. To unset environmental variables, we can use the export command again. Type in export -n VAR and hit Enter. We can verify this by typing in printenv | grep VAR and hit Enter. We can see that the variable is no longer a part of the environment. To unset shell variables, we can use the unset command. Type in unset VAR and hit Enter. Earlier we changed a shell option by turning on posix mode by typing in set -o posix. We can view all shell options by typing in set -o and hit Enter. To unset any shell option, use +o. For instance, to unset posix mode, type in set +o posix and hit Enter. And we can verify this again by typing in set -o. We can change the value of environment and shell variables by setting them. We can also change bash options using the set command. However, these values only survive for the current login session. To make them persistent, we need to add them to one of the bash startup files. Bash stores it's configuration settings in multiple startup files. Different files are processed, depending on how the shell starts. When we log into Linux by typing in a password, Linux first executes the etc profile, which in turn executes scripts in /etc/profile.d These two items are the systemwide file and directories holding our environment and shell variables. Then bash executes the ._profile in the user's home directory, which holds environment and shell variables specific to the user. The local .bash_profile in turn executes the local .bashrc file which holds aliases and bash functions. In CentOS the local .bashrc also executes the systemwide /etc/bashrc file, which holds systemwide aliases and functions. When that is complete, it returns control back to the local .bashrc file in the user's home directory. The local .bashrc file holds aliases and functions specific to the user. Once all of this is done, the user logs in. If a user is already logged in and executes a shell script, it's executed in a shell, but it's not a login shell. Also, if a user is logged into the GUI and starts a shell, it's not a login shell. Generally speaking, a login shell requires entering a password or providing a login key. For non-login shells, only the users .bashrc gets run. Again on CentOS, the local .bashrc file executes the global /etc/bashrc file, which holds systemwide aliases and functions. Then it returns control back to the local .bashrc file again and finishes processing it. This file should contain aliases and functions specific to the user. Once this is all done, the shell starts. In summary, the various bash profile files are for environmental and shell variables useful for interactive logins. If you want to set a variable for all users, set it in either the /etc/profile or a script in /etc/profile.d. If you want to set a variable specific to a user, change it in the user's .bash_profile. If you want to add aliases or functions for all users, add them to the /etc/bashrc. If you want to add aliases or functions specific to a user, add them to the user's .bashrc. It's important to note that when you add aliases or functions to the user's .bashrc file, be sure to add them to the end of the file after /etc/bashrc has been called to override systemwide system aliases and functions.\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
}
 
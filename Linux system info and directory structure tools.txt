Linux system info and directory structure tools
===============================================

Learn Linux command syntax
--------------------------
Learning the Linux command line can be difficult, but understanding the syntax 
of a Linux command can help. The standard Linux command syntax is 

  command [options] <arguments>
    
The "command [options]" and "<arguments>" are separated by blank spaces. 
A Linux command is usually an executable program residing on the Linux disc. 
In our example, "ls" is the command name. 
- If the options are full words, they'll usually be preceded by two dashes. 
- If the options are single letters, they're usually preceded by one dash. 
For instance, "ls space --size"  =  "ls space -s". 

There are no real standards in Linux, but most commands follow these rules. 
You may, however, come across commands that don't. 
It's also possible to have more than one argument. Arguments are separated by 
blank spaces. If we have more than one single character option, we can stack 
them together:

  ls -s -1 /etc  -->  ls -s1 /etc     (will display size of each file)

 We can also mix long options with short options, but they have to be separate. 
 For instance:  ls --size -1 /etc
  
  If you're mixing short options and long options, you'll need to put them on 
  the command line separated by white space. What we've covered here is standard 
  Linux syntax. However, due to the nature of Linux and its historical UNIX 
  roots, there's a lot of exceptions. You may have commands with options that 
  are full words but don't include hyphens, or even have commands that will 
  allow the options to go on the end of the command line after the arguments. 
  Most commands, however, follow the rules.

Get help on the CLI
-------------------
<command> --help

	To get help on a command use '--help' after the command:
	<command> --help

	The --help information is built in to most Linux commands so it will always 
	be available. If the output is too long, use the scroll bar or press 
	'Shift + Page Up' to scroll up. At the top of the output of ls --help, it 
	shows the command syntax or usage. --help doesn't work for all commands. 

help <command>
	
	For those commands built into the bash shell, we can use the help command to get 
	the syntax. 	

man pages

	Usually the documentation offered by --help or the help command is brief. 
	Most commands have manuals written for them, and we can access those 
	manual pages using the 'man' command. To get the manual page for ls:
		man <command>
	
	For a simple command like ls, the manual page and the --help look very 
	similar. For more complex commands, the manual pages get quite long and may 
	include abstract explanations, usage and even examples. The quality of 
	man pages vary depending on the specific project creating them. 
	
	All man pages belong in categories. 
	We can see that our ls man page is in category 1 by looking at the text at 
	the top of the screen. To see the man page categories, we can view the man 
	page for man pages: 
		
		man man-pages
	
	Here we see catgeory 1 is for programs, category 2 is for system calls and 
	so on. If you want more information on any man page category, you can just 
	check the man page for the category:
		
		man <category nr> intro

	This will show the intro page for man page category <category nr>. You can 
	get the intro pages for other man page categories using the same method. 
	There may be more than one man page for a command. To show them use: 

		man -f <command>
		
	Posix is a standard that most Linux-like operating systems try to follow. 
	In many cases, Linux may have a non-Posix-compliant command as well as a 
	Posix-compliant one. You can specify a man page category by specifying the 
	category on the command line. For instance, to get the man page for crontab 
	in category 5, type in 
	
		man 5 crontab 
		
	If you want to do a more exhaustive search through the man pages, 
	you can use man -k:  
		
		man -k crontab
		
	Now we see five man pages, including one for something called anacrontab. 

info pages

	There's one more place we can get documentation on the command line. 
	These are the info pages. Although not all commands have info pages that 
	differ from the man pages. To get the info page for crontab, type 
	
		info crontab
		
	Info is a better tool for large manuals than man, as it supports hypertext. 
	Move the cursor to the Introduction hyperlink and hit Enter to view the 
	linked page. To go back to the previous or last page, press the l key. 
	
	If we scroll all the way to the bottom, we'll be taken to the next page 
	in the documentation. Scrolling to the top takes us to the previous page. 

Get help on the GUI
-------------------
	You can use yelp to open a GUI interface for both man and info pages:
		yelp man:crontab
		yelp info:grep
		
Gathering operating system information
======================================
To install the system information module:  sudo apt install lsb-core
Show basic system info (name, version):
- lsb_release -a
- cat /etc/lsb-release

- hostname		: only hostname
- hostnamectl	: hostname info
- uname -r      : kernel revision
- uname -a      : full kernel revision info

- uptime		: how long has system been running
- uptime -p     : clear readable uptime: 'up .. day, .. hours, .. minutes'

- dmesg			: kernel messages
- dmesg -H		: human readible version

- free -m			: memory info
- cat /proc/meminfo	: all memory info

- gnome-system-monitor	: graphical process tool

- sudo dmicdecode					: query DMI (SMBIOS table)
- sudo dmicdecode -t bios			: query BIOS 
- sudo dmicdecode -t baseboard		: query motherboard
- sudo dmicdecode -t processor		: query processor
Check options in man page

- lsusb			: usb info
- lsusb -v		: extended usb info
- lspci			: pci information

cpu info:
- lscpu			
- cat /proc/cpuinfo

HDD info:
- lsblk

Login commands
==============
- whoami		: user I am currently working on (if I use su or sudo -i)
- logname       : use who you logged on with

- who -H		: logged on users 
- w				: logged on users with extra info
- id			: shows id's of our users and the groups we belong to
- groups		: shows only group names of groups user is member of
- lastlog		: shows all users and when they last logged in
- last -F		: shows only login users
- last | tac	: show result from last but with last lines at the end
                  (tac is reverse from cat :) )
- lastb			: show bad logins

Time and date
=============
timedatectl					: shows date and time info
timedatectl list-timezones	: shows list of time zones
To set:
timedatectl set-timezone <timezone name>

To set time and/or date:
- timedatectl set-time <hh>:<mm>:<ss>
- timedatectl set-time <yyyy>-<mm>-<dd>

Combine						: timedatectl set-time '<yyyy>-<mm>-<dd> <hh>:<mm>:<ss>'
Force update via NTP server	: timedatectl set-ntp true

After setting ntp you need to restart the timedate daemon:
	- sudo systemctl restart systemd-timedated
	- sudo systemctl status systemd-timedated		(to verify activity after restart)
	
Locale and date tools
=====================
- localectl
- localectl list-locales	: list locales
- localectl list-keymaps	: list keymaps

find locales: localectl list-locales | grep ^nl  (.. that begins with nl)

To set locale and/or keymap:
- localectl set-locale <locale name>
- localectl set-keymap <keymap name>

Show date and utc date
- date        : show local date
- date --utc  : show utc date

Date format:
- date +"%h %d %Y"  :  jun 14 2021
- date +"%s"        :  1623674699   (seconds since jan 1st 1970)

From seconds to date:
- date --date='@<seconds>'
  Examples: 
  - date --date='@5'            : 5 seconds after jan 1st 1970 :)
  - date --date='@@1000000000'  : zo 9 sep 2001  3:46:40 CE(S)T
  
  To transfer it to utc add the --utc again:
  - date --utc --date='@@1000000000'  : zo 9 sep 2001  1:46:40 UTC
  
Transfer a certain date to seconds since jan 1st 1970:
- date --utc --date="1973-01-10" +%s

Playing around: find a date, double the seconds and check what date is that :)
- date --date="@$(expr $(date --utc --date="1973-01-10" +%s) \* 2)"

Add a period to a date:
- date --date '+10 days'
- date --date '+2 months'
- date --date 'next thursday'

For a calendar use' cal'
- cal <year>
- cal -<nr of months>

View files
==========
- Use redirects (>) to pipe output to a file
- use cat to show content
- use tac to show content in reversed order
- less/more for page
- use pipes:  journalctl | less

- head <n> journal.txt	: show first n lines
- tail <n> journal.txt	: show last n lines

Follow a file with tail:
- sudo tail -f var/log/messages (or syslog depending on distro)

Use 'wc' to count lines, words and/or characters
wc -l <file name> : counts lines in this file
or pipe: <file name> | wc -l

journalctl | head -n100 | tac | less :
This will take the output of journalctl, grabs the first 100 lines using head, 
then uses tac to reverse the order, and sends it to less to show one page at a time. 

Search within a file
====================
We take journal.txt as example (as cpied from journalctl command):
journalctl > journal.txt

Search:
- grep kernel journal.txt		: find all lines with 'kernel' in it
- grep ^Dec journal.txt			: find all lines beginning with 'Dec'
- grep Service.$ journal.txt	: find all lines ending with 'Service.'

Of course you can also use pipes:
- journalctl | grep Service.$

Archiving
=========
Tape archiver (tar):
- sudo tar --xattrs -cvpf etc.tar /etc

--xattrs : preserves acl info and security info 
-cvpf    : create (c), verbose (show output, v), save ownership and permissions (p)
           and f for filename of the archive (here: etc.tar)
           
Tar only archives and does not compress.
To compress add the zip format as option:
- gzip :  sudo tar --gzip --xattrs -cvpf etc.tar.gz /etc
- bzip2:  sudo tar --bzip2 --xattrs -cvpf etc.tar.bz2 /etc
- xz   :  sudo tar --xz --xattrs -cvpf etc.tar.xz /etc

Comnpression rate:
tar (none) -> bz2 -> gzip -> xz (last till 10% of original!)

tar -tf <archive name>   : list all files in the archive

Extract to here         :  tar --xattrs -xvpf etc.tar
Extract to other folder :  tar --xattrs -xvpf etc.tar -C <target folder>

Compress and uncompress files
=============================
- zip file      : gzip   / bzip2   / xz   <file>    (removes the original file)
                : zip <zip filename> <file>         (creates a new zip file next to the 
                                                     original)

- unzip file    : gunzip / bunzip2 / unxz <file>

List files
==========
- where am I?   pwd

list files : 'ls'
- ls -1         1 file per line
- ls -l         long list
- ls -lh        make it human readable
- ls -R /       show all flies on the whole system!

Understand file system paths
============================
- tree                  : overview of directory contents
- file <file name>      : show what filetype a file is
- cd ~      : got to your home dir
- cd -      : go to the last dir (keeps switching between last two dirs)

Explore the Linux file system
=============================
Structure of Linux file system follows the Filesystem Hierarchy Standard (FHS).

/       root dir
/bin    essential comnmand libraries
/boot   boot loader files including kernels
/dev    essential device files
/etc    system config files
/home   users' home directories
/lib    32-bit system libraries
/lib64  64-bit system libraries
/media  mount points fro removable media
/mnt    temporarily mounted filesystems
/opt    optional application software packages
/proc   virtual filesystem providing process and kernel info as files
/root   home directory for the root user
/run    run-time configuration data
/sbin   essesntial system binaries
/srv    site-specific data served by this system
/sys    conatins info about the devices connected to this system
/tmp    temporary files
/usr    read-only user data; contains majoroty of utilities and apps
/var    variable files whose content is expected to change during normal operation
    
Find files with locate
======================
install mlocate first to use 'locate'
locate uses a database to store all files

- locate <name>     find all files that contains <name>
- locate -c <name>  only count the found files

Examples:
- locate bzip2          find files with bzip2
- locate bzip2 man      find files with bzip2 or man
- locate -A bzip2 man   find files with bzip2 AND man

Using regexp:
- locate --regexp '^/usr.*pixmaps.*jpg$'
    find all files beginning with /user, conatining pixmaps and ending with jpg
    












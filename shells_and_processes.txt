Linux: Shells and processes
===========================

Command execution process flow
------------------------------

     Keyboard  ->  terminal emulator  -> shell 
                                          |
                                          v
screen <- terminal emulator <- shell <- kernel

Shell types
-----------
When you use the keyboard to type in commands into a terminal window, such as 
GNOME Terminal, these commands are translated by the shell into ones and zeroes 
and sent to the kernel which then processes them. When the kernel finishes, 
it sends the data back to the shell which translates the output back into text 
which is displayed in the terminal emulator and output on the screen. 

A shell allows you to execute operating system commands. 
When a command is entered into the terminal, the shell checks to see 
- if it's a built-in first, and if so, executes it. 
- If it's not built-in, it will see if it's an alias of another command, 
  configured by the OS or another user. 
- If it's not built-in, or an alias, it will look for the command on the disk 
  and try to execute it there. 
- If it doesn't exist, it will say "command not found." 

There is a standard for Unix-like operating systems called POSIX. 
If you want to write your shell scripts to be portable, it may be advantageous 
to write your shell scripts in a POSIX-compliant manner. 

One of the first shells was the Bourne Shell, which came in out 1977. 
It was fairly basic and POSIX-compliant. Bill Joy one of the founders of 
Sun Microsystems wrote csh or the C Shell, which resembles the C language. 
The Bourne Shell won out in popularity, and it's not recommended that we write 
shell scripts in csh anymore. In 1983 ksh or the Korn Shell was introduced 
adding job control and command history, which we'll talk about later in this course. 

Later, Bash was introduced as a replacement for Bourne. If started with the correct 
options, Bash is mostly POSIX compliant. Bash includes most of the original 
functionality of the Bourne Shell, most of the additions of Korn Shell, as well 
as some additional functionality of its own. 
Bash is probably the default shell on more Unix systems than any other shell. 
Most systems now run Bash 4. 

Another popular shell is Dash. Dash is the Debian version of the Ash Shell 
from NetBSD Unix. Its biggest claim to fame is that it's smaller and uses less 
memory than Bash. Although it's popular on Debian-based distributions it isn't 
easily installed on CentOs 7. 

If interactivity is your interest you may want to check out Fish. 
Fish has some interesting features like syntax highlighting on the command line 
so you know if you've typed in the correct command. It also suggests commands, 
options and paths. 

The last shell we'll talk about is Zsh. Zsh has virtually identical features 
to Bash, but is enhanced in several ways including better command and option 
completion and better pattern matching. 

Most of these shells can be installed using yum. For instance, to install Zsh, 
you'd type into a terminal:
- sudo apt install -y zsh 

to change your shell, run the change shell command and follow the prompts. 
Be sure to type in the whole path to the desired shell when prompted. 
You type in 'chsh' and hit Enter. If will prompt you for the desired shell. 
To use the new shell, you'll have to log out and log back in again. 
There are a lot of interesting shell options in Linux. For interactive use, 
you should try out the different shells to see what you like. 
However, if you create shell scripts to automate tasks, the choice of a shell 
becomes very important as the syntax of built-in design elements like loops, 
conditionals and arrays will change depending on which shell you use. 
Shell scripts written for one shell may not be compatible with another. 
I would recommend at this time to keep using Bash and later explore other shells.

Variables and shell environment
===============================
There are two types of variables accessible in a shell session. 

- Environmental variables: defined for the current shell and inherited by 
  any child processes or child shells. 

- Shell variables: contained exclusively within the shell in which they were 
  defined. They are often used to keep track of data like the current 
  working directory. 

To see the environmental variables in a terminal, type in 'printenv' and hit Enter. 
If you want to get the value of an individual variable, you can specify it. 
Type in printenv, and for instance type in capital SHELL and hit Enter. 
Another way is to use the echo command to print the value by typing in 'echo $SHELL' 
and hit Enter. 

To see the shell variables we use the set command. Type in 'set' and hit Enter. 
By default the set command shows shell functions as well as variables, 
which can be quite long. 

To change the behavior of set do posix mode, which doesn't show functions. Use the dash O posix option. 
Type in 'set -o posix' and hit Enter. Now type in set again and let's pipe it to less. 
Here we can see all of the shell variables without the shell functions. 

To show the difference between environmental variables and shell variables, let's set a variable in 
our shell. Press q to quit, and then type in 'VAR=TEST' and hit Enter. 
Now let's grep the output of set to view it. 
Type in 'set | grep VAR' and hit Enter. And there it is. Now let's grep the output of printenv. 

Type in 'printenv | grep VAR' and hit Enter. 
And we can see that a variable is not a part of the environment. 
To turn a shell variable into an environmental variable we can just export it. 
Let's export the variable we just set. Type in export VAR and hit Enter. Verify with printenv. 
Type in printenv | grep VAR and hit Enter. And we can that our variable is now part of the environment. 
It isn't persistent since we didn't save it in a file. If we rebooted, it would disappear. 

To unset environmental variables, we can use the export command again. 
Type in 'export -n VAR' and hit Enter. 
We can verify this by typing in printenv | grep VAR and hit Enter. 
We can see that the variable is no longer a part of the environment. 
To unset shell variables, we can use the unset command. 
Type in 'unset VAR' and hit Enter. 

Earlier we changed a shell option by turning on posix mode by typing in set -o posix. 
We can view all shell options by typing in set -o and hit Enter. To unset any shell option, 
use +o. For instance, to unset posix mode, type in 'set +o posix' and hit Enter. 
And we can verify this again by typing in set -o. We can change the value of environment and 
shell variables by setting them. 

We can also change bash options using the set command. However, these values only survive for 
the current login session. To make them persistent, we need to add them to one of the bash startup files. 
Bash stores it's configuration settings in multiple startup files. Different files are processed, 
depending on how the shell starts:

1. /etc/profile
When we log into Linux by typing in a password, Linux first executes the etc profile ..

2. /etc/profile.d
.. which in turn executes scripts in /etc/profile.d. These two items are the systemwide file and 
directories holding our environment and shell variables. 

3. ~/.bash_profile
Then bash executes the ._profile in the user's home directory, which holds environment and shell 
variables specific to the user. 

4. ~/.bashrc
The local .bash_profile in turn executes the local .bashrc file which holds aliases and bash functions. 
In CentOS the local .bashrc also executes the systemwide /etc/bashrc file, which holds systemwide aliases 
and functions. When that is complete, it returns control back to the local .bashrc file in the user's 
home directory. The local .bashrc file holds aliases and functions specific to the user. 

Once all of this is done, the user logs in. If a user is already logged in and executes a shell script, 
it's executed in a shell, but it's not a login shell. Also, if a user is logged into the GUI and starts 
a shell, it's not a login shell. Generally speaking, a login shell requires entering a password or 
providing a login key. For non-login shells, only the users .bashrc gets run. Again on CentOS, the local 
.bashrc file executes the global /etc/bashrc file, which holds systemwide aliases and functions. 
Then it returns control back to the local .bashrc file again and finishes processing it. This file 
should contain aliases and functions specific to the user. 

Once this is all done, the shell starts. 

In summary, the various bash profile files are for environmental and shell variables useful for 
interactive logins:
- If you want to set a variable for all users, set it in:
	- /etc/profile    or
	- /etc/profile.d 
- If you want to set a variable specific to a user, change it in: 
	- the user's .bash_profile. 
- If you want to add aliases or functions for all users:
	- add them to the /etc/bashrc. 
- If you want to add aliases or functions specific to a user: 
	- add them to the user's .bashrc. 
	
! - It's important to note that when you add aliases or functions to the user's .bashrc file, be sure 
to add them to the end of the file after /etc/bashrc has been called to override systemwide 
system aliases and functions.

Shell tips and tricks
=====================
It helps to know some tips and tricks when using the Linux shell. 
Let's talk about some pathname shortcut locations, or pathname expansions. 

pwd 
To verify where we are in the file system, type in 'pwd' into a terminal. This shows that we're in our home directory. 

cd ..
Now type in 'cd ..' and type in 'pwd' again to verify. Typing in cd .. takes us to our parent directory 
which is one higher in the directory tree than where we were. 

cd .
Another shortcut is cd . Type in cd . and hit Enter. Now type in 'pwd' to verify, and we can see that 
we are in the same location. The single dot is a shortcut to our current directory. The dot isn't very 
useful for the cd command, but often we want to copy files to our current directory. 
Instead of typing in the whole path, we could just use dot. 

cd ~
Now type in cd ~ and hit Enter, and then type in pwd to verify our path. The tilde takes us to our 
home directory. 

cd -
Now type in cd - and hit Enter. We don't have to type pwd after cd - as it tells us where we are. 
Type in cd - again, and you can see that it takes us back to our home directory. cd - just takes you 
to the previous directory or the last one you were in. 

Using pathname expansion can be a great time-saver for Linux users. 

clear (or <ctrl><l>)
If you want to clear the screen, type in clear. 

cmd completion (<tab> once for completion or twice to see choice)
--------------
Another productivity trick for Bash is command line completion. To set this up, let's go back to 
our home directory by typing in cd ~ and then typing in ls to get a directory listing. 
To use command line completion, we'll use our Tab key. The purpose of the Tab key is to complete the 
line for us so we don't have to type it in again. Type in cd M and then hit the Tab key, and you'll see 
that the line is completed for us. If we have one directory starting with a capital m, Bash will complete 
the line for us. However, if there's more than one possible choice Bash will give us an option, but only 
after we've pressed Tab twice. Let's backspace our line all the way to the beginning. And then type in 
cd D and hit your Tab key twice. You see that we have three different choices: Desktop, Documents and 
Downloads. Bash wants us to type in a unique character, so type in the e and hit your Tab key again. 
And now it can complete the line. 

moving in a cmd line (<Home>, <End>, <alt><b>, <alt><f>
--------------------
To quickly move between the beginning and end of the line, just use the Home and End keys. 
So, press the Home key, and you can see that your cursor moves to the beginning. End key takes you to 
the end. If you just want to move one word at a time, you can press alt + b to go backwards and 
alt + f to go forwards.

Remark:
<ctrl><u> removes everything before the cursor
<ctrl><k> removes everything after the cursor

Shell history tricks
====================

The Shell keeps track of the command history. Useful commands/variables:

up/down : browse through history
history	: show all commands you used (default set to 500 or 1000 items depending on config)
!!    	: Bring back the entire last line from the history
sudo !!	: Run the previous command with prefix 'sudo ' (run previous command as super user)
!-<nr>  : Show x-th command from the bottom (!-4 : execute the 4th command before the last one)
!<nr>   : Run a specific command (!73 : run command from history list with nr 73)
!<text> : find command starting with <text>
!*		: use arguments from previous line
			You can use it within a command line as variable:
			1. printenv HISTCONTROL    (parameter = HISTCONTROL)
			2. export !*="ignoreboth"  (will run: export HISTCONTROL="ignoreboth")

ctrl+r	: reverse i-search (= history search mode)
			- type text and command starting with that text show up
				- enter			  : run line
				- arrow left/right: edit it
				- ctrl+r		  : continue search 

Configure shell history
=======================

History is saved in a file ~/.bash_history
Control the history config via shell variables.
- Use  export <variable>=<value>  to set it
- Use  export <variable>=""       to unset it
To make changes permanent add them to your bash profile (~/.bashrc).

You can use:
- export HISTCONTROL=ignorespace	: if command line starts with space don't store it in the history
- export HISTCONTROL=ignoredups 	: ignore new duplicate entries
- export HISTCONTROL=erasedups 		: remove existing duplicates from history
- export HISTIGNORE="history*"		: ignore any lines that start with the word history and are followed 
                                      by any number of characters
Combine them (use colon):  
- export HISTCONTROL="erasedups:ignorespace"
- export HISTIGNORE="history*:ls*"

- export HISTTIMEFORMAT="%h %d %H:%M:%S> " : log time for each history item
- export HISTSIZE=10000			: set history size to 10000 (default = 1000)
- export HISTSIZE=-1			: set history size to unlimited
- export HISTSIZE=0				: stop keeping track of history
- export HISTFILESIZE=10000		: set how many lines are saved in the ~/.bash_history file

Pattern matching with globs
===========================

One of the reasons that manipulating files on the command line can be faster and more efficient than 
the GUI is pattern matching. In Bash, pattern matching is called file globbing, and all commands can use it. 

File globs allow us to match patterns. For instance, if we wanted to list config files, we could match 
files ending in .conf by using an asterisk:  ls /etc/*.conf 

- * 	: matches any type of character and any number of them. 
- ? 	: matches any type of character but only one of them;
          if you want to match two characters, you're going to have to include two question marks. 
- [..]  : match a range or a list of characters with a set using square brackets. 
          Each set matches exactly one character, but that one character can be any of the items in the 
          range or list. By placing a hyphen (-) between the start and ending characters, we can create 
          a range. Without the hyphen, the characters are treated as a list. 
          
          Examples: 
          - file[0-9].txt       : match file1.txt, file2.txt. Without the hyphen, it becomes a list. 
		  - file[abc123].jpg 	: match filea, fileb, and file3, and so on. 
		  
		  If we want to match a hyphen, then we need to include the hyphen at the beginning 
		  or end of the list of characters in the set. 
- !..	: does NOT match character(s) following. We can also negate characters to match by placing an 
		  exclamation mark inside the set. 
		  - [!0-9]  : not match a number that's zero through nine

Character classes:
  Linux also provides us a mechanism for matching certain character classes:
	- [:digit:] : match numbers
	- [:upper:] : match uppercase letters
	- [:lower:] : match lowercase characters 
    - [:alpha:] : both upper and lower characters. 
	- [:alnum:] : match uppercase, lowercase, and digits
	- [:space:] : match whitespaces such as spaces, tabs, and newlines
	- [:graph:] : printable characters not including spaces
	- [:print:] : printable characters including spaces 
	- [:punct:] : match punctuation
	- [:cntrl:] : match nonprintable characters
	- [:xdigit:]: to match hexadecimal characters

	Examples:
	- ls file[0-9].txt    : is the same as: ls file[[:digit:]].txt
	- ls file[![:digit:]] : will match filea.txt, but not file1.txt

	[![:digit:]]	
	Note, using the exclamation point inside the outer square brackets negates everything inside of them 
	including multiple character classes. Keep in mind that all sets whether they're ranges, lists, or 
	character classes match exactly one character. 
	
This is all for SINGLE characters.
To use RANGES you need to use brace extension: {..}:
- ls {*.jpg,*.gif,*.png}	: match anything ending in .jpg, .gif, or .png

Pattern matching with extended globs
====================================
In addition to standard globs, bash allows us to use extended globs. 
Extended globs give us more pattern matching power: 
	- specify nr of occurences to match
	- grouping matches
	- patterns can be more than one character
	- match one pattern or another
	- zero or one occurences of a match

Manage this as shell option 'extglob' via 'shopt'
- Turn on : shopt -s extglob   (turn off with shopt -u extglob , but why would you? ;-) )
	
To make this persistent, put it in your bash startup file. 

Examples:
- file?(abc).txt	: match zero or one occurrence of the letters abc: file.jpg, fileabc.jpb
- file*(abc).jpg	: match zero or more occurrences of the letters abc: file.jpg, fileabc.jpg, fileabcabc.jpg
- file+(abc).txt	: match one or more occurrence; would match fileabc.txt and also fileabcabc.txt
					  (so abc, abcabc, abcabcabc etc..)
- +(*.jpg|*.gif)	: match files that end in .jpg or .gif
- !(*.jpg|*.gif)	: match all files NOT ending on .jpg or .gif

Group patterns:
- !(+(photo|file)*+(.jpg|.gif)) : grouped two different patterns in one match. Matches all files that 
								  do not start with photo or file and don't end with .jpg or gif. 

Escape characters and quotes
============================
The bash shell has characters called meta-characters that have special meaning:
<, >, ^, $, ., *, ?, [], |, {}, (), +, \, '', "" 

echo My name is $USER	: My name is <user>
echo "My name is $USER"	: My name is <user>  (same)

However:
	echo 'My name is $USER'	: My name is $USER

Single quotes tell the shell to present the characters inside literally. 
Use them when you want to search for special characters so you don't have to escape them.
Example: grep '.*/udp' /etc/services 

Escape one character with \ :
- echo \$USER  gives $USER  
- echo '\' 		: by surrounding the backslash with single quotes, we escaped it. 
- echo \'text\'	: 'text'; we used backslashes to escape the single quotes.

Brace and path substitution
===========================
In Chapter One of this course we talked about using dot and dot dot as short cuts to the current directory 
and the parent directory. These short cuts are provided by the file system. We can see these by showing 
hidden files with LS: ls -la

There is another way of expanding the path to include these directories and more using bash path substitution. 
The ~ allows us to expand the path to include directories like the users home, the current directory, 
parent directory, or even the previous directory. 

echo ~  		: show own home dir
echo ~root		: show homedir of another user (here root)
echo ~+			: current dir (same as pwd)
echo ~-			: show previous dir 

Expand to any directory in the list: 
- use the 'pushd' command to put directories in the list (stack) first:  pushd <directory>
- Use 'dirs' to list the directories in the stack. 
- The stack items are numbered from 0 to n
- To use an item refer to it as ~<nr>, so the 1st item in the stack = ~0

Use it like this: cd ~3  jumps to the 4th item in the dirs stack
To remove items from the list use 'popd +<stack item nr>', so 'popd +2' will remove the 3rd item.

Using brace expansions for word patterns:
- echo s{pe,pi}ll  echoes: spell and spill

Note: this does not work inside of quotes. 
Bring your line back and insert quotes before the S and after the last L and hit enter.

Command and variable substitution
=================================
echo "my name is $USER" outputs the text my name is followed by the value and the user variable. 
Examples or variable substitution:
- pdir="/tmp/files/today"	-> mkdir -p $pdir		(-p = for creating parent dir if needed)
- ls -d $pdir   : check if it indeed exists 		(-d is for showing a dir, not the contents)
- fname="report"				-> ls -l $fname			(-l is long listing format, not just the name)
- touch $pdir/${fname}_january	-> ls -l "$(pdir)/${fname}_January

We can also use it for command substutution.
Put the command between parentheses or backticks:

- echo "my name is $(whoami)"   is the same as
- echo "my name is `whoami`"

Placing quotes around strings and braces around variables makes dash variables much 
more reliable. For instance, use:  ls -l "${pdir}/${fname}_January" 

Named and unnamed pipes
=======================
A pipe (|) is a way of one program communicating with another. 
Common use: take the output of one command and send it to the input of another command. 

For instance:  
- grep tcp /etc/services | less 
- grep tcp /etc/services | awk '{print $1}' | sort | less 

This type of pipe is considered an unnamed pipe. 
This is a direct connection between two commands running in the SAME terminal. 

If we want to send output from a command in one terminal to another command in a 
different terminal, we can use a named pipe or FIFO. 
FIFO stands for first in, first out. This is a pipe that exists in the file system. 
The pipe acts like a file on a disc that one process can write to, while another 
reads from. A named pipe is still a direct connection between programs. It just 
uses the file system as an interface. 

When one process is writing to the named pipe, its output gets blocked until the 
receiving process starts reading it. Let's take a look at how this works. To set 
this up, let's open a second terminal.
- In the left-hand terminal, type in: mkfifo named_pipe   (can be any name)
  This makes a pipe called named_pipe. 
- Now, let's send some data to this pipe using echo and a redirect. 
  Type in: echo "Hi"'> named_pipe 
  Notice that we don't get our terminal back. This is because the I/O is being blocked. 
  The echo command can't finish printing the word Hi until another process reads it 
  from the named pipe. 
- Now, in the second terminal, type:  cat named_pipe 
  We see that as soon as cat reads the output from the named pipe, the echo command 
  was able to finish. We can use named pipes to send output from one command in 
  the OS, to another command without them running in the same shell, or even by the 
  same user. 
  
  In the directory you can receignize a named pipe with a 'p' as left-most character.
  (type in ls -l named_pipe to check). You can remove it with 'rm' like a regular file.

File redirects and tees
=======================
To redirect use > to add&replace and >> to append.
available redirect channels are:
- stdin    			input	<
- stdout			output  1>  (or just >)
- stderr			errors  2>
- both out and err	both  	&>

To get rid of output redirect it to: /dev/null

Redirect to a file	: echo hello > output.txt
Append to a file	: echo hello >> output.txt
Read and add		: sort < output.txt > sorted_output.txt

Use 'tee' to output to a file and use the result to go further.
This makes it possible to save something without breaking the 'pipe chain'
Example:
- sudo find /etc 2> etcerr.txt | sort | tee etcsort.txt | wc -l
		1. first find all /etc entries and send the errors to file etcerr.txt
		2. The rest is sorted
		3. save them to a file etcsort.txt AND pass the result further
		4. count the lines 

This will:
- save all error lines to etcerr.txt
- the successful lines will be sorted and saved to etcsort.txt
- then ALL lines will be counted and shown

Introduction to processes
=========================
On Linux a process is a program loaded into memory:
- a process is a running instance of a program (which allocates memory)
- each process gets a process id: PID
- each process has a parent process (with id PPID) that started it. 
  Example:  ps -eF  

	UID        PID  PPID  C    SZ   RSS PSR STIME TTY          TIME CMD
	root         1     0  0   225   584   7 13:55 ?        00:00:00 /init
	root       111     1  0   225    92   2 14:16 ?        00:00:00 /init
	root       112   111  0   225    92   4 14:16 ?        00:00:00 /init
	djdegoed   113   112  0  2708  5964   0 14:16 pts/0    00:00:02 -bash
	djdegoed   357   113  0  2656  3340   3 16:31 pts/0    00:00:00 ps -eF

- process 357 was started by process 113, 113 by 112, 112 by 111 and so on.

To start a process in the background use '&' behind the command
It will be created with a process id and a job nr.
To show running jobs: jobs -l

To activate a background job use    : fg %<job nr>
To set a job back to the background : ctrl+Z


Monitoring processes using PS
=============================

A Linux system may have hundreds of processes running at any time.
The first tool we'll look at to monitor processes is the 'ps' command.
Use it to show a basic overview of processes run by the user executing it:

  PID TTY          TIME CMD
  113 pts/0    00:00:02 bash
  392 pts/0    00:00:00 ps

It shows process id, used terminal, aggregated execution time and the command.

Oddly, the ps command has three different types of syntax options: Unix, BSD and GNU.

The Unix options looks as you'd expect with a dash before a single letter. 
The GNU options are words with two dashes just like other commands. 
The odd ones are the BSD options which don't have any dashes at all. 
For this course, we'll focus on the Unix and GNU options. 

Other options for ps:
-e			: display every process (same columns as ps)
-H			: hierarchy option; gives us an idea of which processes start at 
              other processes, We can see with indentation

ps -eH:
  PID TTY          TIME CMD
    1 ?        00:00:00 init
  111 ?        00:00:00   init
  112 ?        00:00:00     init
  113 pts/0    00:00:02       bash
  393 pts/0    00:00:00         ps

-f			: full info
ps -ef:
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 13:55 ?        00:00:00 /init
root       111     1  0 14:16 ?        00:00:00 /init
root       112   111  0 14:16 ?        00:00:00 /init
djdegoed   113   112  0 14:16 pts/0    00:00:02 -bash
djdegoed   401   113  0 16:51 pts/0    00:00:00 ps -ef

Shows:
user id, process id, parent process id, cpu usage, start time, command with args

-F			: adds extra info (-f +)

ps - eF :
UID        PID  PPID  C    SZ   RSS PSR STIME TTY          TIME CMD
root         1     0  0   225   584   7 13:55 ?        00:00:00 /init
root       111     1  0   225    92   2 14:16 ?        00:00:00 /init
root       112   111  0   225    92   0 14:16 ?        00:00:00 /init
djdegoed   113   112  0  2720  6064   4 14:16 pts/0    00:00:02 -bash
djdegoed   402   113  0  2656  3312   6 16:53 pts/0    00:00:00 ps -eF


Shows also:
allocated memory, total memory size and the CPU the process is running on. 

-l 			: long format
ps -elF : 
This gives us 17 columns of information. Check the man page for more information 
on each of these columns. A lot of the information in the ps -elF I don't need 
on a regular basis. 

-- format	: You can customize what are shown on the screen by passing the 
			  --format long option. 
			  Example: ps -e --format uid,pid,ppid,%cpu,cmd 

-- sort		: sort on any field. 
			  Example: ps -e --format uid,pid,ppid,%cpu,cmd --sort %cpu
					   ps -e --format uid,pid,ppid,%cpu,cmd --sort pid
			  Place a hypen (-) before the field to sort descending

-U /-u		: show processes for one or more users (by name)
			  Example: ps -U root  (or ps -U root,djdegoed)
			  Use -u for user id's instead of names

-G /-g		: show processes for one or more groups (by name)
			  Example: ps -G root  (or ps -G root,djdegoed)
			  Use -g for user id's instead of names

-C 			: show processes by program name
			  Example: ps -C firefox

Handy examples of ps use:
- ps -e --format uid,pid,tty,%cpu,cmd --sort %cpu	
- ps -e --format uid,pid,tty,rss,cmd --sort rss"   (sorted by memory usage)
- ps -U <username> --format %mem | awk '{memory +=$1};END {print memory}' 

Want to install a really cool monitor app?
Check out: https://itsfoss.com/linux-system-monitoring-tools/

For instance install bashtop:
- sudo add-apt-repository ppa:bashtop-monitor/bashtop
- sudo apt update
- sudo apt install bashtop

Process priority
================
Linux process priorities are handled by a system called nice. 
Nice levels go from 
  -1 to -19  for privileged users. 
   0 to 19   for nonprivileged users. 

The default nice level is zero. 
When a process is started it has a default nice level. 

The nice level is the number that reflects how nice the process is to the CPU. 
The nicer a process is to the CPU, the less it interrupts it and the lower it's 
priority is. Because the process is getting fewer resources from the CPU, it also 
has lower priority. This means other processes will get more CPU time than it will. 

If the nice level is less than zero then it is less nice to the CPU and demands 
more resources from it. Thus having a higher priority for CPU time. 

In summary: 
- the higher the nice number, the lower the CPU priority. 
- the lower the nice number, the higher the CPU priority. 

If we want to start a process with a predetermined nice level, we can start it 
with a nice command. 

Example: 
- nice -2 top		Set the nice level to 2
- ps -C top 		To check the set nice level

Notice the nice level is positive 2 instead of -2. 
To set a nice level of -2 you need to set:  nice --2  (extra hyphen)

Remind that only privileged users can set negative nice levels, 
so we'll need to use sudos, the above would become:  sudo nice --2 top

The niceness of a process can also be changed after the process is running, 
using the 'renice' command. 
Example:  sudo renice 5 <process id>

One-time jobs using at and batch
================================
There are two different types of scheduled jobs:
- one time jobs
- recurring jobs

For one time jobs we use a service called 'at'. 
The at service runs at jobs at a certain time. 
Or in the case of a batch job, when the CPU load average drops below 0.8. 

The syntax for at is:  at <time format>
At supports a wide variety of time formats including simple 12 and 24 hour 
clock times, like 4:25 am, or 16:45. It also supports general terms like 
midnight, noon, tomorrow, and now, plus a specified number of minutes, 
hours or days. It even supports teatime which is apparently at 4 pm. 

If we don't want to schedule one time job today, we can specify a time and date. 
The time format always has to come before the date. The at services is usually 
installed by default. Let's be sure by installing it using apt, and if there's a 
newer version apt will update it. 
Type into a terminal: sudo apt install -y at  

We'll also want to ensure the service is running and survives a reboot. 
Type in:  	- sudo systemctl start atd  (or 'sudo service atd start' on WSL)
			- sudo systemctl enable atd
			
To create an at job that will run in five minutes we type in:
- at now + 5min 

This will give us a prompt where we can type in Linux commands to run. 
Let's type in 
- mkdir ~/Documents.bak
- rsync -a ~/Documents/ ~/Documents.bak. 
- enter and ctrl-d to save it. 

Show your 'at' jobs    : atq     (At the beginning of the line there is a job number)
Show specific 'at' job : at -c <job nr>   (shows job including shell env, so only check last 
                                         lines)
Remove an 'at' job     : atrm <job nr>

The at service also allows us to create batch jobs. 
The difference between an at job and a batch job, is that the at job runs at a specified time. Batch jobs run when the system load average drops below 0.8 ensuring they only get run, when the system isn't busy. 

To create a batch job type in: batch

Now insert the commands you wish to run. For this example we'll do something simple. Type in touch, space ~/batchfile.txt and hit Enter. Press cntrl+d and type in atq and hit Enter again. If our computer is busy the batch file won't run. If the system load average drops below 0.8, the batch file will run. Atq shows batch jobs. If it doesn't show up then that means the batch job already ran. 

Recurring user jobs using cron
==============================
To store recurring user jobs we use the 'cron' service which stores jobs in cron tables.
Two types:
- user cron jobs       : specific to each user, managed by users  /var/spool/cron/<user>
- system cron jobs     : system wide, managed by root             /etc/cron.d

To install  : sudo apt-get install cron
To start    : sudo service cron start  / sudo systemctl start cron
To enable   : sudo service cron enable / sudo systemctl enable cron

To create a crontab entry : crontab -e
To list you crontab file  : crontab -l
Help on crontab           : man cron        about the Vixie cronie daemon
                            man crontab     about maintaining crontab files
                            man 5 crontab   section 5 for file formats and conventions

A cron tab entry is built up as follows:

1.  2.  3.  4.  5.  6.
------------------------------------------------------------
45  23  *   *   6   /home/djdegoed/bin/backup.sh
0   1   *   *   *   rsync -a ~/Documents/ ~/Documents.bak

1. min:
    - 45        every 45th min of the hour
    - 15,30,45  every 15th, 30rd and 45th minute of the hour
    - 15-45     between 15 and 45 minute each minute
    - */10      every 10th minute
    - 1-59/2    every odd minute
    
2. hour:
    - 23        at 23:00
    - *         every hour

3. day of the month:
    - 31        on the 31th of each month
    - *         every day

4. month of the year:
    - 12        in dec
    - *         every month
5. day of the week:
    - 0-6 (sun - sat)
    - sun, mon, etc
    
6. command to run
    
Recurring system jobs using cron
================================
To add a cron job on system level you need to add a file to the /etc/cron.d directory
as an elevated user. For instance:

- sudo nano /etc/cron.d/backupdocs

Difference with user crontab is that you extra need to specify which user.
Also home (~) needs to be written out: /home/<username>

Difference same job:
- user crontab   : 0 1 * * * rsync -a ~/Documents/ ~/Documents.bak
- system crontab : 0 1 * * * root rsync -a /home/djdegoed/Documents/ /home/djdegoed/Documents.bak
                             ----    

Handy directories under /etc for system cron jobs on specific times:
- cron.daily
- cron.hourly
- cron.monthly
- cron.weekly

Limit access to AT and cron jobs
================================
Control which users can use at or cron via files:
- /etc/at.allow
- /etc/cron.allow
- /etc/at.deny
- /etc/cron.deny

Access control:  sudo nano /etc/security/access.conf

File has 3 columns: access control (+=allow, -=revoke), username and service.
Example line:
-:ALL EXCEPT root:cron

Means: "take permissions away for all except root on service cron"

More info: man access.conf

Introduction to system services
===============================
these are process started by the os and waiting to get used in the background.
They are called 'daemons' in Linux.  (derived from Maxwell's daemon ;-))

Examples:
- web servers
- file servers
- mail servers
- network servers
- authentication servers

Daemon services end with d many times: httpd, smbd, sshd, shcpd
When Linux boots the kernel starts one service: init. That service starts all other processes.
Init comes from System V and works with run levels.
These could be switched at any time to create different versions of the os.

System V shortcomings:
- slow startup
- no service dependencies
- no persistent network

Newest replacement of System V init = systemd

Systemd manages services, devices, system timers and targets 
(targets = systemd equivalent to run levels)
Systemd objects are called units and for each unit there is a unit file for configuration.

Units are managed via: systemctl
- systemctl list-unit-files -at service
- systemctl list-units -at service
- systemctl list-units -t service --state running

To examine a service    : systemctl cat rsyslog
To check status         : systemctl status rsyslog
Only check if active    : systemctl is-active rsyslog
Only check if enabled   : systemctl is-enabled rsyslog

To stop a service       : systemctl stop rsyslog
To start a service      : systemctl start rsyslog
To restart a service    : systemctl restart rsyslog
To deny a service       : systemctl mask rsyslog
To allow a service again: systemctl unmask rsyslog

Disable or enable       : systemctl disable rsyslog
                          systemctl enable rsyslog
                          





























